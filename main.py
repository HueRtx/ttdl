import asyncio
import logging
import yt_dlp
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–≤—É–∫–æ–≤ —Å TikTok. üéµüé• –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ. üì•")

@dp.message()
async def vid_n_sound(message: types.Message):
    filename = random.randint(1,99999) 
    filename_aud = random.randint(1,99999)
    ydl_opts = {
        'outtmpl': f"/home/floduat/bot/{filename}.mp4",
    }
    ydl_opts_aud = {
    'format': 'bestaudio/best',
    'outtmpl': f"/home/floduat/bot/{filename_aud}",
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}
    
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([message.text])
    with yt_dlp.YoutubeDL(ydl_opts_aud) as ydl:
        ydl.download([message.text])
    await bot.send_audio(message.from_user.id, types.FSInputFile(f"{filename_aud}.mp3"))
    await bot.send_video(message.from_user.id, types.FSInputFile(f"{filename}.mp4"))

#@dp.message()
#async def otvet1(message: types.Message) -> None:
#    builder = InlineKeyboardBuilder()
#    builder.add(types.InlineKeyboardButton(
#        text="–í–∏–¥–µ–æüé•",
#        callback_data="vid"), types.InlineKeyboardButton(
#        text="–ó–≤—É–∫üéµ",
#        callback_data="song"))
#    await message.answer(text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å", reply_markup=builder.as_markup())
#@dp.callback_query(Text("vid"))
#async def send_vid(callback: types.CallbackQuery,message: types.Message):
#    ydl_opts = {}
#    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
#        ydl.download([message.text])
#    await callback.message.answer_photo

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())